/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VideoManagerInterface extends utils.Interface {
  contractName: "VideoManager";
  functions: {
    "createVideo(uint256,string,uint256,uint256)": FunctionFragment;
    "disableVideo(string)": FunctionFragment;
    "editVideo(uint256,string,uint256,uint256)": FunctionFragment;
    "getVideoAccess(string,address,address)": FunctionFragment;
    "videoAccess(string,address)": FunctionFragment;
    "videos(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createVideo",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableVideo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "editVideo",
    values: [BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVideoAccess",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "videoAccess",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "videos", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "createVideo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableVideo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editVideo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVideoAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "videoAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "videos", data: BytesLike): Result;

  events: {
    "VideoCreated(address,uint256,string,uint256,uint256)": EventFragment;
    "VideoDisabled(string,address)": EventFragment;
    "VideoEdited(address,uint256,string,uint256,uint256)": EventFragment;
    "VideoPurchased(address,uint256,address,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VideoCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VideoDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VideoEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VideoPurchased"): EventFragment;
}

export type VideoCreatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  {
    creator: string;
    price: BigNumber;
    videoHash: string;
    referalFee: BigNumber;
    publisherFee: BigNumber;
  }
>;

export type VideoCreatedEventFilter = TypedEventFilter<VideoCreatedEvent>;

export type VideoDisabledEvent = TypedEvent<
  [string, string],
  { videoHash: string; creator: string }
>;

export type VideoDisabledEventFilter = TypedEventFilter<VideoDisabledEvent>;

export type VideoEditedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  {
    creator: string;
    price: BigNumber;
    videoHash: string;
    referalFee: BigNumber;
    publisherFee: BigNumber;
  }
>;

export type VideoEditedEventFilter = TypedEventFilter<VideoEditedEvent>;

export type VideoPurchasedEvent = TypedEvent<
  [string, BigNumber, string, string, string],
  {
    buyer: string;
    price: BigNumber;
    refferer: string;
    videoHash: string;
    publisher: string;
  }
>;

export type VideoPurchasedEventFilter = TypedEventFilter<VideoPurchasedEvent>;

export interface VideoManager extends BaseContract {
  contractName: "VideoManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VideoManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableVideo(
      _videoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getVideoAccess(
      _videoHash: string,
      _referrer: string,
      _publisher: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    videoAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    videos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
        creator: string;
        price: BigNumber;
        referalFee: BigNumber;
        publishingFee: BigNumber;
        ipfsHash: string;
        disabled: boolean;
      }
    >;
  };

  createVideo(
    _price: BigNumberish,
    _videoHash: string,
    _referalFee: BigNumberish,
    _publisherFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableVideo(
    _videoHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editVideo(
    _price: BigNumberish,
    _videoHash: string,
    _referalFee: BigNumberish,
    _publisherFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getVideoAccess(
    _videoHash: string,
    _referrer: string,
    _publisher: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  videoAccess(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  videos(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
      creator: string;
      price: BigNumber;
      referalFee: BigNumber;
      publishingFee: BigNumber;
      ipfsHash: string;
      disabled: boolean;
    }
  >;

  callStatic: {
    createVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    disableVideo(_videoHash: string, overrides?: CallOverrides): Promise<void>;

    editVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getVideoAccess(
      _videoHash: string,
      _referrer: string,
      _publisher: string,
      overrides?: CallOverrides
    ): Promise<void>;

    videoAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    videos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, boolean] & {
        creator: string;
        price: BigNumber;
        referalFee: BigNumber;
        publishingFee: BigNumber;
        ipfsHash: string;
        disabled: boolean;
      }
    >;
  };

  filters: {
    "VideoCreated(address,uint256,string,uint256,uint256)"(
      creator?: null,
      price?: null,
      videoHash?: null,
      referalFee?: null,
      publisherFee?: null
    ): VideoCreatedEventFilter;
    VideoCreated(
      creator?: null,
      price?: null,
      videoHash?: null,
      referalFee?: null,
      publisherFee?: null
    ): VideoCreatedEventFilter;

    "VideoDisabled(string,address)"(
      videoHash?: null,
      creator?: null
    ): VideoDisabledEventFilter;
    VideoDisabled(videoHash?: null, creator?: null): VideoDisabledEventFilter;

    "VideoEdited(address,uint256,string,uint256,uint256)"(
      creator?: null,
      price?: null,
      videoHash?: null,
      referalFee?: null,
      publisherFee?: null
    ): VideoEditedEventFilter;
    VideoEdited(
      creator?: null,
      price?: null,
      videoHash?: null,
      referalFee?: null,
      publisherFee?: null
    ): VideoEditedEventFilter;

    "VideoPurchased(address,uint256,address,string,address)"(
      buyer?: null,
      price?: null,
      refferer?: null,
      videoHash?: null,
      publisher?: null
    ): VideoPurchasedEventFilter;
    VideoPurchased(
      buyer?: null,
      price?: null,
      refferer?: null,
      videoHash?: null,
      publisher?: null
    ): VideoPurchasedEventFilter;
  };

  estimateGas: {
    createVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableVideo(
      _videoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getVideoAccess(
      _videoHash: string,
      _referrer: string,
      _publisher: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    videoAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    videos(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableVideo(
      _videoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editVideo(
      _price: BigNumberish,
      _videoHash: string,
      _referalFee: BigNumberish,
      _publisherFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getVideoAccess(
      _videoHash: string,
      _referrer: string,
      _publisher: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    videoAccess(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    videos(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
